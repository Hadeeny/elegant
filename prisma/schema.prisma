// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma generate to add new fields/tables to db
// npx prisma db push to push the updated fields to the db 
// npx prisma migrate reset to delete or reset the db

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  role          UserRole @default(USER)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  stores        Store[]
  posts         Post[]
}

model Store {
  id            String    @id @default(cuid())
  name          String?
  billboards    Billboard[] @relation("StoreToBillboard")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  categories    Category[] @relation("StoreToCategory")
  user          User    @relation(fields: [userId], references: [id])
  sizes         Size[]
  colors       Color[]
  // user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // role          UserRole @default(USER)
  
  // accounts      Account[]
}

model Billboard {
  id  String @id @default(cuid())
  storeId   String
  store   Store   @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories  Category[]  
  label String
  imageUrl  String
   createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// The billboard model has a storeId property, which obviously references the Store model
// so we need to link them using the @relation, references: [id] meaning the id property inside the Store Model

model Post {
  id  String @id @default(cuid())
  userId  String
  body    String
  user    User @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Category {
  id  String @id @default(cuid())
  storeId   String
  store     Store  @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId   String
  billboard  Billboard  @relation(fields: [billboardId], references: [id])
  name    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Size {
  id  String @id @default(cuid())
  storeId String
  store   Store @relation(fields: [storeId], references: [id])
  name  String
  value   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Color {
  id  String @id @default(cuid())
  storeId String
  store   Store @relation(fields: [storeId], references: [id])
  name  String
  value   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}